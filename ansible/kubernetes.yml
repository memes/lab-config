# Install kubernetes on hosts
# yamllint disable rule:truthy rule:line-length
---
- name: Prepare all hosts for kubernetes
  hosts: servers
  become: yes
  vars:
    required_modules:
      - br_netfilter
    k8s_sysctl:
      - param: net.bridge.bridge-nf-call-iptables
        value: 1
      - param: net.bridge.bridge-nf-call-ip6tables
        value: 1
      - param: net.ipv4.ip_forward
        value: 1
      - param: vm.nr_hugepages
        value: 2048
  tasks:
    - name: Configure persistent modules for Kubernetes
      vars:
        pb_name: kubernetes
      ansible.builtin.template:
        src: templates/servers/modules-load.conf.j2
        dest: "/etc/modules-load.d/kubernetes.conf"
        owner: root
        group: root
        mode: 0644
      tags:
        - prep
    - name: Add modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop: "{{ required_modules }}"
      tags:
        - prep
    - name: Disable ufw
      community.general.ufw:
        state: disabled
      ignore_errors: yes
      when: ansible_distribution == "Ubuntu"
      tags:
        - prep
    - name: Disable firewalld
      ansible.builtin.systemd:
        name: firewalld
        enabled: no
        masked: yes
        state: stopped
      ignore_errors: yes
      when: ansible_os_family == "RedHat"
      tags:
        - prep
    - name: Set persistent sysctl params for Kubernetes
      ansible.posix.sysctl:
        name: "{{ item['param'] }}"
        value: "{{ item['value'] }}"
        sysctl_file: /etc/sysctl.d/90-kubernetes.conf
        sysctl_set: yes
        reload: yes
        state: present
      loop: "{{ k8s_sysctl }}"
      tags:
        - prep
    - name: disable swap
      ansible.builtin.command: swapoff -a
      tags:
        - base
    - name: remove swapfs
      ansible.posix.mount:
        path: none
        fstype: swap
        state: absent
      tags:
        - prep
    - name: mount bpffs on Ubuntu 18.04
      ansible.posix.mount:
        path: /sys/fs/bpf
        src: bpffs
        fstype: bpf
        opts: rw,nosuid,nodev,noexec,relatime,mode=700
        state: mounted
      when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "18"
      tags:
        - prep
    - name: Disable SELinux on CentOS/RHEL
      ansible.posix.selinux:
        state: disabled
      when: ansible_os_family == "RedHat"
      notify:
        - reboot
      tags:
        - prep
  handlers:
    - name: reboot
      ansible.builtin.reboot:
        post_reboot_delay: 120
        reboot_timeout: 300

- name: Install kubernetes
  hosts: servers
  become: yes
  tasks:
    - name: Add Kubernetes apt keys
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      when: ansible_os_family == "Debian"
      tags:
        - base
    - name: Add Kubernetes apt repo
      ansible.builtin.apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
      when: ansible_os_family == "Debian"
      tags:
        - base
    - name: Add Kubernetes yum repo
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes
        file: kubernetes
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
        enabled: yes
        gpgcheck: yes
        repo_gpgcheck: yes
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      when: ansible_os_family == "RedHat"
      tags:
        - base
    - name: Install kubectl, kubeadm, and kubelet for Debian/Ubuntu
      ansible.builtin.package:
        name:
          - "kubectl={{ kubernetes_version }}-00"
          - "kubelet={{ kubernetes_version }}-00"
          - "kubeadm={{ kubernetes_version }}-00"
        state: present
      when: ansible_os_family == "Debian"
      tags:
        - base
    - name: Hold kubectl, kubeadm, and kubelet on Debian/Ubuntu
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubectl
        - kubelet
        - kubeadm
      when: ansible_os_family == "Debian"
      tags:
        - base
    - name: Install kubectl, kubeadm, and kubelet for CentOS/RHEL
      ansible.builtin.package:
        name:
          - "kubectl-{{ kubernetes_version }}"
          - "kubelet-{{ kubernetes_version }}"
          - "kubeadm-{{ kubernetes_version }}"
        state: present
      when: ansible_os_family == "RedHat"
      tags:
        - base
    - name: Enable kubelet unit
      ansible.builtin.systemd:
        name: kubelet
        enabled: yes
        state: started
        daemon_reload: yes
      tags:
        - base
    - name: Generate kubeadm join token
      ansible.builtin.command: kubeadm token generate
      register: kubeadm_token_command
      run_once: yes
      tags:
        - init
    - name: Generate kubeadm cert token
      ansible.builtin.command: kubeadm certs certificate-key
      register: kubeadm_cert_key_command
      run_once: yes
      tags:
        - init
    - name: Generate kubeadm configuration (first master)
      vars:
        kubeadm_token: "{{ kubeadm_token_command.stdout }}"
        kubeadm_cert_key: "{{ kubeadm_cert_key_command.stdout }}"
      ansible.builtin.template:
        src: templates/kubernetes/kubeadm.yml.j2
        dest: /var/tmp/kubeadm.yml
        owner: root
        group: root
        mode: 0644
      run_once: yes
      when: k8s_master | default(False)
      tags:
        - init
    - name: Execute kubeadm (first master)
      ansible.builtin.command: "kubeadm init {% if kubeadm_skip_phases | default([]) | length > 0 %}--skip-phases={{ kubeadm_skip_phases | join(',') }}{% endif %} --node-name={{ k8s_node_name }} --config=/var/tmp/kubeadm.yml --upload-certs"
      args:
        creates: /etc/kubernetes/admin.conf
      run_once: yes
      when: k8s_master | default(False)
      tags:
        - init
    - name: Get base kubeadm join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: kubeadm_join_command
      when: k8s_master | default(False)
      run_once: yes
      tags:
        - join
    - name: Get kubeadm cert hash
      ansible.builtin.shell: kubeadm init phase upload-certs --upload-certs 2>/dev/null | tail -n1
      register: kubeadm_cert_hash
      when: k8s_master | default(False)
      run_once: yes
      tags:
        - join
    - name: Join other kubeadm servers
      ansible.builtin.command: "{{ kubeadm_join_command.stdout }} {{ (k8s_master | default(False)) | ternary('--control-plane --apiserver-advertise-address ' + (vlan100_addresses | ansible.utils.ipv4('host/prefix') | ansible.utils.ipaddr('address') | first) + ' --certificate-key ' + kubeadm_cert_hash.stdout, '', '') }} --node-name={{ k8s_node_name }}"
      args:
        creates: /etc/kubernetes/kubelet.conf
      tags:
        - join
    - name: Remove scheduling taints
      ansible.builtin.command: kubectl taint nodes {{ k8s_node_name }} node-role.kubernetes.io/control-plane- --kubeconfig=/etc/kubernetes/admin.conf
      when: (k8s_master | default(False)) and (k8s_worker | default(True))
      tags:
        - taints
    - name: Remove legacy scheduling taints
      ansible.builtin.command: kubectl taint nodes {{ k8s_node_name }} node-role.kubernetes.io/master- --kubeconfig=/etc/kubernetes/admin.conf
      when: (k8s_master | default(False)) and (k8s_worker | default(True))
      tags:
        - taints
    - name: Create admin user account(s)
      ansible.builtin.command: "kubeadm kubeconfig user --config=/var/tmp/kubeadm.yml --client-name {{ item }}@{{ lab_domain }}"
      register: kubeconfig
      loop: "{{ k8s_admins | default(['memes']) }}"
      run_once: yes
      when: k8s_master | default(False)
      tags:
        - users
    - name: Write admin accounts YAML
      ansible.builtin.template:
        src: templates/kubernetes/admin-user-rbac.yml.j2
        dest: /var/tmp/{{ item.item }}-admin-rbac.yml
        owner: root
        group: root
        mode: 0644
      run_once: yes
      when: k8s_master | default(False) and item.rc == 0
      loop: "{{ kubeconfig.results }}"
      loop_control:
        label: "{{ item.item }}"
      tags:
        - users
    - name: Execute admin account bindings
      ansible.builtin.command: "kubectl apply -f /var/tmp/{{ item.item }}-admin-rbac.yml --kubeconfig=/etc/kubernetes/admin.conf"
      run_once: yes
      when: k8s_master | default(False) and item.rc == 0
      loop: "{{ kubeconfig.results }}"
      loop_control:
        label: "{{ item.item }}"
      tags:
        - users
    - name: Write user kubeconfig(s) locally
      ansible.builtin.template:
        src: templates/kubernetes/kubeconfig.user.j2
        dest: ../kubeconfig.{{ item.item }}
        force: yes
        mode: 0600
      run_once: yes
      become: no
      delegate_to: localhost
      when: item.rc == 0
      loop: "{{ kubeconfig.results }}"
      loop_control:
        label: "{{ item.item }}"
      tags:
        - users
    - name: Clean up kubeadm template
      ansible.builtin.file:
        path: /var/tmp/kubeadm.yml
        state: absent
      loop:
        - /var/tmp/kubeadm.yml
      run_once: yes
      when: (k8s_master | default(False))
      tags:
        - never
    - name: Clean up user rbac templates
      ansible.builtin.file:
        path: /var/tmp/{{ item }}-admin-rbac.yml
        state: absent
      loop: "{{ k8s_admins | default(['memes']) }}"
      run_once: yes
      when: (k8s_master | default(False))
      tags:
        - never
