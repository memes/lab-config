# Install vCenter on an ESXi host - after running this playbook, vCenter VM will
# be provisioned on one of the ESXi servers. Configuration parameters *should*
# be present but may need to be triggered by logging in at vCenter configuration
# URL https://vcenter.DOMAIN:5480/
# yamllint disable rule:truthy rule:line-length
---
- name: Install vCenter
  hosts: servers
  gather_facts: no
  become: no
  vars:
    ks_vault_options: "secret={{ vault_kv2_kickstart_secrets_path }} url={{ vault_url }} ca_cert={{ root_ca }}"
    ks_secrets: "{{ lookup('community.hashi_vault.hashi_vault', ks_vault_options) }}"
  tasks:
    - name: Verify ESXi is active
      community.vmware.vmware_about_info:
        hostname: "{{ inventory_hostname }}"
        username: root
        password: "{{ ks_secrets.root }}"
        validate_certs: no
      delegate_to: localhost
    - name: Import vCenter OVA to ESXi
      community.vmware.vmware_deploy_ovf:
        hostname: "{{ inventory_hostname }}"
        username: root
        password: "{{ ks_secrets.root }}"
        validate_certs: no
        ovf: "{{ vcenter_ova_path }}"
        name: "{{ vcenter_machine }}"
        allow_duplicates: no
        deployment_option: tiny
        disk_provisioning: thin
        datastore: "{{ real_hostname.split('.') |  first }}"
        networks:
          'Network 1': "{{ vcenter_vnet }}"
        properties:
          guestinfo.cis.appliance.net.addr.family: ipv4
          guestinfo.cis.appliance.net.mode: static
          guestinfo.cis.appliance.net.pnid: "{{ vcenter_hostname }}"
          guestinfo.cis.appliance.net.addr: "{{ vcenter_address }}"
          guestinfo.cis.appliance.net.prefix: '16'
          guestinfo.cis.appliance.net.gateway: '172.17.0.1'
          guestinfo.cis.appliance.net.dns.servers: '172.17.0.1'
          guestinfo.cis.appliance.root.passwd: "{{ ks_secrets.root }}"
          guestinfo.cis.appliance.root.shell: /bin/bash
          guestinfo.cis.appliance.ssh.enabled: 'True'
          guestinfo.cis.appliance.ntp.servers: '172.17.0.1'
          guestinfo.cis.deployment.autoconfig: 'True'
          guestinfo.cis.deployment.node.type: embedded
          guestinfo.cis.vmdir.username: "administrator@{{ lab_domain }}"
          guestinfo.cis.vmdir.password: "{{ ks_secrets.administrator }}"
          guestinfo.cis.vmdir.site-name: lab
          guestinfo.cis.vmdir.domain-name: "{{ lab_domain }}"
          guestinfo.cis.ceip_enabled: 'False'
          vami.domain.VMware-vCenter-Server-Appliance: "{{ vcenter_hostname }}"
          vami.searchpath.VMware-vCenter-Server-Appliance: "{{ lab_domain }}"
        inject_ovf_env: yes
        wait_for_ip_address: no
        power_on: no
      run_once: yes
      delegate_to: localhost
    # TODO: @memes - is the pause really necessary? Seems to help...
    - name: Pause for 10 seconds
      ansible.builtin.pause:
        seconds: 10
    - name: Change vCenter VM type to Photon x86_64
      community.vmware.vmware_guest:
        hostname: "{{ inventory_hostname }}"
        username: root
        password: "{{ ks_secrets.root }}"
        validate_certs: no
        name: "{{ vcenter_machine }}"
        datastore: "{{ real_hostname.split('.') |  first }}"
        guest_id: vmwarePhoton64Guest
        state: present
      run_once: yes
      delegate_to: localhost
    # TODO: @memes - is the pause really necessary? Seems to help...
    - name: Pause for 10 seconds
      ansible.builtin.pause:
        seconds: 10
    # - name: Enable autostart for vCenter VM
    #   community.vmware.vmware_host_auto_start:
    #     hostname: "{{ inventory_hostname }}"
    #     esxi_hostname: "{{ inventory_hostname }}"
    #     username: root
    #     password: "{{ ks_secrets.root }}"
    #     validate_certs: no
    #     name: "{{ vcenter_machine }}"
    #     power_info:
    #       start_action: powerOn
    #       start_delay: 10
    #       start_order: 1
    #       stop_action: powerOff
    #       wait_for_heartbeat: systemDefault
    #   run_once: yes
    #   delegate_to: localhost
    # - name: Pause for 10 seconds
    #   ansible.builtin.pause:
    #     seconds: 10
    - name: Boot vCenter VM
      community.vmware.vmware_guest:
        hostname: "{{ inventory_hostname }}"
        username: root
        password: "{{ ks_secrets.root }}"
        validate_certs: no
        name: "{{ vcenter_machine }}"
        datastore: "{{ real_hostname.split('.') |  first }}"
        state: powered-on
      run_once: yes
      delegate_to: localhost
    - name: Link to finish installation
      ansible.builtin.debug:
        msg: "Complete/trigger vCenter installation at {{ vcenter_config_url }}"
      run_once: yes
      delegate_to: localhost
